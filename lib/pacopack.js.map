{"version":3,"file":"pacopack.js","sources":["../src/utf8.ts","../src/index.ts"],"sourcesContent":["if (typeof performance === \"undefined\") {\r\n    performance = require(\"perf_hooks\").performance;\r\n}\r\n\r\nexport default class UTF8 {\r\n    static MAX_1BYTE_UTF8 = 256 / 4;\r\n    static BYTELENGTH_MAX = 24;\r\n    static TO_STRING_MAX = 24;\r\n    static TO_STRING_FUNCS_MAX = 54;\r\n    static TO_BUFFER_MAX = 54;\r\n    static optimize(ms = 300) {\r\n        optimizeStrings(ms);\r\n    }\r\n    static byteLength(str:string) {\r\n        let s = str.length;\r\n        for (let i = str.length-1; i >= 0; i--) {\r\n            let code = str.charCodeAt(i);\r\n            if (code > 0x7f) {\r\n                if (code < 0x800) {\r\n                    s++;\r\n                } else if (code < 0x10000) {\r\n                    s += 2;\r\n                }\r\n                if (code >= 0xDC00 && code < 0xE000) {\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n        return s;\r\n    }\r\n    static toBuffer(str:string, buffer:Buffer, offset:number) {\r\n        if (str.length <= UTF8.TO_BUFFER_MAX) {\r\n            return toBuffer(str, buffer, offset);\r\n        }\r\n        let size = buffer.write(str, offset);\r\n        return {\r\n            size: size,\r\n            isQuad: true\r\n        };\r\n    }\r\n    static toString(buffer:Buffer, offset:number, stringLength:number, bufferLength:number) {\r\n        if (stringLength > UTF8.TO_STRING_FUNCS_MAX) {\r\n            if (bufferLength <= UTF8.TO_STRING_MAX) {\r\n                return toString(buffer, offset, offset + bufferLength);\r\n            }\r\n            return buffer.toString(\"utf8\", offset, offset + bufferLength);\r\n        }\r\n        return funcs[stringLength](buffer, offset);\r\n    }\r\n}\r\n\r\nconst funcs:((buffer:Buffer, offset:number)=>string)[] = [];\r\nfunction func(i:number) {\r\n    let v = `v${i}`;\r\n    return `let ${v} = buffer[offset++];\r\nif (${v} >= 0x80) {\r\n    if (${v} > 0xBF && ${v} < 0xE0) {\r\n        ${v} = (${v} & 0x1F) << 6 | buffer[offset++] & 0x3F;\r\n    } else {\r\n        ${v} = (${v} & 0x0F) << 12 | (buffer[offset] & 0x3F) << 6 | buffer[offset + 1] & 0x3F;\r\n        offset += 2;\r\n    }\r\n}`;\r\n}\r\nfunction getVars(i:number) {\r\n    return new Array(i+1).fill(0).map((n, i) => `v${i}`).join(\",\");\r\n}\r\nfunction createFunction(fs:string[], i:number) {\r\n    fs = fs.slice();\r\n    fs.push(`return String.fromCharCode(${getVars(i)});`);\r\n    return new Function(\"buffer\", \"offset\", fs.join(\"\\r\\n\")) as typeof funcs[0];\r\n}\r\nfunction fill_funcs() {\r\n    let fs:string[] = [];\r\n    funcs.push(() => \"\");\r\n    for (let i = 0; i < UTF8.MAX_1BYTE_UTF8; i++) {\r\n        fs.push(func(i));\r\n        funcs.push(createFunction(fs, i));\r\n    }\r\n}\r\nfill_funcs();\r\n\r\nlet codes = new Array(UTF8.TO_STRING_MAX * 4);\r\nfunction toString(buffer:Buffer, offset:number, end:number) { // array of bytes\r\n    let pos = 0;\r\n    for (let i = offset; i < end; i++) {\r\n        let value = buffer[i];\r\n        if (value === 0xFF) {\r\n            break;\r\n        } else if (value < 0x80) {\r\n            codes[pos++] = value;\r\n        } else if (value > 0xBF && value < 0xE0) {\r\n            codes[pos++] = (value & 0x1F) << 6 | buffer[i + 1] & 0x3F;\r\n            i += 1;\r\n        } else if (value > 0xDF && value < 0xF0) {\r\n            codes[pos++] = (value & 0x0F) << 12 | (buffer[i + 1] & 0x3F) << 6 | buffer[i + 2] & 0x3F;\r\n            i += 2;\r\n        } else {\r\n            let charCode = ((value & 0x07) << 18 | (buffer[i + 1] & 0x3F) << 12 | (buffer[i + 2] & 0x3F) << 6 | buffer[i + 3] & 0x3F) - 0x010000;\r\n            codes[pos++] = charCode >> 10 | 0xD800;\r\n            codes[pos++] = charCode & 0x03FF | 0xDC00; \r\n            i += 3;\r\n        }\r\n    }\r\n    return String.fromCharCode(...codes.slice(0, pos));\r\n}\r\nfunction toBuffer(str:string, buffer:Buffer, offset:number) {\r\n    let quad = false;\r\n    let start = offset;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let charcode = buffer[offset++] = str.charCodeAt(i);\r\n        if (charcode >= 0x80) {\r\n            if (charcode < 0x800) {\r\n                buffer[offset-1] = 0xc0 | (charcode >> 6);\r\n                buffer[offset++] = 0x80 | (charcode & 0x3f);\r\n            } else if (charcode < 0xd800 || charcode >= 0xe000) {\r\n                buffer[offset-1] = 0xe0 | (charcode >> 12);\r\n                buffer[offset++] = 0x80 | ((charcode >> 6) & 0x3f);\r\n                buffer[offset++] = 0x80 | (charcode & 0x3f);\r\n            } else {\r\n                i++;\r\n                quad = true;\r\n                charcode = 0x10000 + (((charcode & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\r\n                buffer[offset-1] = 0xf0 | (charcode >>18);\r\n                buffer[offset++] = 0x80 | ((charcode>>12) & 0x3f);\r\n                buffer[offset++] = 0x80 | ((charcode>>6) & 0x3f);\r\n                buffer[offset++] = 0x80 | (charcode & 0x3f);\r\n            }\r\n        }\r\n    }\r\n    return { size: offset - start, isQuad: quad };\r\n}\r\n\r\nfunction iterationOtimizerLoop<T extends any[]>(cb:(...args:T) => void, ...args:T) {\r\n    let totals = 0;\r\n    let iterations = 25;\r\n    for (let i = 0; i < 25; i++) {\r\n        let t = performance.now();\r\n        for (let ii = 0; ii < iterations; ii++) {\r\n            cb(...args);\r\n        }\r\n        let dif = (performance.now() - t) / (iterations/25);\r\n        if (!dif) {\r\n            iterations *= 2;\r\n            i--;\r\n        } else {\r\n            if (totals == 0) {\r\n                totals = dif;\r\n            } else {\r\n                totals = (totals + dif) / 2;\r\n            }\r\n        }\r\n    }\r\n    return totals;\r\n}\r\nfunction iterationOtimizer<T extends any[]>(cb1:(...args:T) => void, cb2:(...args:T) => void, ...args:T):1|2 {\r\n    let totals1 = iterationOtimizerLoop(cb1, ...args);\r\n    let totals2 = iterationOtimizerLoop(cb2, ...args);\r\n    return totals1 > totals2 ? 1 : 2;\r\n}\r\nfunction stringIterationOtimizer<T>(cbPrepare:(str:string) => T, cb1:(str:string, arg2:T) => void, cb2:(str:string, arg2:T) => void, ms:number, maxLength = Infinity) {\r\n    let counter = 4;\r\n    let totals = -1;\r\n    let start = performance.now();\r\n    while(true) {\r\n        let str = Buffer.allocUnsafe(counter).fill(100).toString();\r\n        let longer = iterationOtimizer(cb1, cb2, str, cbPrepare(str));\r\n        if (longer === 2) {\r\n            counter -= 4;\r\n        }\r\n        if (longer === 2 || counter >= maxLength) {\r\n            if (totals == -1) {\r\n                totals = counter;\r\n            } else {\r\n                totals = (totals + counter) / 2;\r\n            }\r\n            counter = 0;\r\n        }\r\n        counter += 4;\r\n        if ((performance.now() - start > ms)) {\r\n            break;\r\n        }\r\n    }\r\n    return totals > -1 ? Math.round(totals) : Infinity;\r\n}\r\nfunction optimizeStrings(ms = 300) {\r\n    ms /= 3;\r\n    UTF8.BYTELENGTH_MAX = stringIterationOtimizer(() => {}, str => {\r\n        Buffer.byteLength(str);\r\n    }, str => {\r\n        UTF8.byteLength(str);\r\n    }, ms);\r\n    UTF8.TO_STRING_MAX = stringIterationOtimizer(str => {\r\n        return Buffer.from(str);\r\n    }, (str, buffer) => {\r\n        buffer.toString(\"utf8\", 0);\r\n    }, (str, buffer) => {\r\n        toString(buffer, 0, buffer.length);\r\n    }, ms);\r\n    codes = new Array(UTF8.TO_STRING_MAX * 4);\r\n    UTF8.TO_STRING_FUNCS_MAX = stringIterationOtimizer(str => {\r\n        return Buffer.from(str);\r\n    }, (str, buffer) => {\r\n        str.length <= UTF8.TO_STRING_MAX ? toString(buffer, 0, buffer.length) : buffer.toString(\"utf8\", 0);\r\n    }, (str, buffer) => {\r\n        funcs[str.length-1](buffer, 0);\r\n    }, ms, funcs.length);\r\n    UTF8.TO_BUFFER_MAX = stringIterationOtimizer(str => {\r\n        return Buffer.allocUnsafe(str.length * 4);\r\n    }, (str, buffer) => {\r\n        buffer.write(str, 0);\r\n    }, (str, buffer) => {\r\n        UTF8.toBuffer(str, buffer, 0);\r\n    }, ms);\r\n}","import UTF8 from \"./utf8\";\r\nexport { UTF8 };\r\n\r\nconst enum REGEXP_FLAGS {\r\n    g = 0b00000001,\r\n    m = 0b00000010,\r\n    s = 0b00000100,\r\n    i = 0b00001000,\r\n    u = 0b00010000\r\n}\r\nconst enum OPCODES {\r\n    null,\r\n    undefined,\r\n    true,\r\n    false,\r\n    array_start,\r\n    array_end,\r\n    object_start,\r\n    object_end,\r\n    map_start,\r\n    map_end,\r\n    set_start,\r\n    set_end,\r\n    string_map_do_not_reset,\r\n    strkey_single,\r\n    string_single,\r\n    regexp,\r\n\r\n    number      = 0b10000000, // 1 bit (number) + 3 bits (opcode) + 1 bit (negative) + 3 bits (bytes)\r\n    bigint      = 0b11000000,\r\n    full_bigint = 0b10100000,\r\n    string      = 0b11100000,\r\n    static      = 0b10010000,\r\n    date        = 0b11010000,\r\n    buffer      = 0b10110000,\r\n    strkey      = 0b11110000,\r\n}\r\nconst enum NUMBER_MASKS {\r\n    OPCODE   = 0b11110000,\r\n    NEGATIVE = 0b00001000,\r\n    BYTES    = 0b00000111\r\n}\r\nconst NUMBER = Symbol();\r\n\r\nexport type Dictionary = {\r\n    words:{[key:string]:{[NUMBER:symbol]:number}};\r\n    total:number;\r\n    dictionary:{[index:number]:string};\r\n};\r\n\r\ntype SerializableObject<TO_JSON extends boolean = false> = {[key:string]:Serializables<TO_JSON>};\r\nexport type Serializables<TO_JSON extends boolean = false> = boolean|string|number|bigint|RegExp|Date|undefined|Map<Serializables<TO_JSON>, Serializables<TO_JSON>>|Set<Serializables<TO_JSON>>|Buffer|Uint8Array|null|Serializables<TO_JSON>[]|(TO_JSON extends true ? SerializableObject<TO_JSON>|{toJSON?():Serializables<TO_JSON>} : SerializableObject<TO_JSON>);\r\n\r\nexport type PacoPackOptions = {\r\n    step?:number;\r\n    sortKeys?:boolean;\r\n    mapKeys?:boolean;\r\n};\r\n\r\nexport class PacoPack<TO_JSON extends boolean = false> {\r\n    private static _B64 = 0b1111111111111111111111111111111111111111111111111111111111111111n;\r\n    private _buffer = Buffer.allocUnsafe(0);\r\n    private _dataView = new DataView(this._buffer.buffer);\r\n    private _bufferArray:Uint8Array[] = [];\r\n    private _totalBuffer = 0;\r\n    private _pos = 0;\r\n    private _size = 0;\r\n    private _strIndex = 0;\r\n    private _strMap:{[key:string]:{[NUMBER:symbol]:number}} = {};\r\n    //private _strMap = new Map<string, number>();\r\n    private _dirtyStringMap = true;\r\n    private _receiveStrMap:{[index:number]:string} = {};\r\n    //private _receiveStrMap = new Map<number, string>();\r\n    private _receiveStrMapIndex = 0;\r\n    private _receivePos = 0;\r\n    dictionary:Dictionary|null = null;\r\n    options:PacoPackOptions = {\r\n        step: 512\r\n    };\r\n    constructor(options?:PacoPackOptions|null, dictionary?:string[]|Dictionary|null, readonly toJSON?:TO_JSON|null) {\r\n        options && this.setOptions(options);\r\n        if (dictionary) {\r\n            this._setDictionary(dictionary);\r\n            this.resetStringMap();\r\n            this._resetReceiveStringMap();\r\n        }\r\n    }\r\n    private static _BigInt64BlocksCount(n:bigint) {\r\n        let count = 0;\r\n        while(n > 0n) {\r\n            n = n >> 64n;\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n    private static _WriteBigUint(buffer:Buffer, offset:number, n:bigint) {\r\n        while(n > 0n) {\r\n            let f64 = n & this._B64;\r\n            n = n >> 64n;\r\n            buffer.writeBigUInt64LE(f64, offset);\r\n            offset += 8;\r\n        }\r\n    }\r\n    private static _WriteBigUintDataView(dataView:DataView, offset:number, n:bigint) {\r\n        while(n > 0n) {\r\n            let f64 = n & this._B64;\r\n            n = n >> 64n;\r\n            dataView.setBigUint64(offset, f64, true);\r\n            offset += 8;\r\n        }\r\n    }\r\n    private static _ReadBigUint(buffer:Buffer, offset:number, blocks:number) {\r\n        let n = 0n;\r\n        let count = 0n;\r\n        let blocksb = BigInt(blocks);\r\n        while(count < blocksb) {\r\n            let b = buffer.readBigUInt64LE(offset); // More performant using DataView. Create global DataView only if there's bigints to deserialize\r\n            offset += 8;\r\n            n += b << (64n * count);\r\n            count++;\r\n        }\r\n        return n;\r\n    }\r\n    static OptimizeStrings(ms = 300) {\r\n        UTF8.optimize(ms);\r\n        return UTF8;\r\n    }\r\n    private _setDictionary(dictionary:string[]|Dictionary) {\r\n        if (Array.isArray(dictionary)) {\r\n            let dicObj:Dictionary = {\r\n                words: {},\r\n                total: dictionary.length,\r\n                dictionary: {}\r\n            };\r\n            for (let i = 0; i < dictionary.length; i++) {\r\n                let w = dictionary[i];\r\n                dicObj.words[w] = {[NUMBER]:i};\r\n                dicObj.dictionary[i] = dictionary[i];\r\n            }\r\n            dictionary = dicObj;\r\n        }\r\n        return this.dictionary = dictionary;\r\n    }\r\n    private _resetReceiveStringMap() {\r\n        if (this.dictionary) {\r\n            this._receiveStrMap = {...this.dictionary.dictionary}; // For numeric keys, is better to spread than Object.create\r\n            this._receiveStrMapIndex = this.dictionary.total;\r\n        } else {\r\n            this._receiveStrMap = {};\r\n            this._receiveStrMapIndex = 0;\r\n        }\r\n    }\r\n    private _read<T extends Serializables>(buffer:Buffer):T {\r\n        let opcode = buffer[this._receivePos++];\r\n        if ((opcode & OPCODES.number) === OPCODES.number) {\r\n            let bytes = opcode & NUMBER_MASKS.BYTES;\r\n            let n = 0;\r\n            switch(bytes) {\r\n                case 1: {\r\n                    n = buffer[this._receivePos++];\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    n = buffer[this._receivePos] + (buffer[this._receivePos + 1] << 8);\r\n                    //n = buffer.readUInt16LE(this._receivePos);\r\n                    this._receivePos += 2;\r\n                    break;\r\n                }\r\n                case 3: {\r\n                    n = buffer[this._receivePos] + (buffer[this._receivePos + 1] << 8) + (buffer[this._receivePos + 2] << 16);\r\n                    //n = buffer.readUIntLE(this._receivePos, 3);\r\n                    this._receivePos += 3;\r\n                    break;\r\n                }\r\n                case 4: {\r\n                    n = buffer[this._receivePos] + (buffer[this._receivePos + 1] << 8) + (buffer[this._receivePos + 2] << 16) + (buffer[this._receivePos + 3] << 24 >>> 0);\r\n                    //n = buffer.readUInt32LE(this._receivePos);\r\n                    this._receivePos += 4;\r\n                    break;\r\n                }\r\n                case 5: {\r\n                    n = buffer[this._receivePos] + (buffer[this._receivePos + 1] << 8) + (buffer[this._receivePos + 2] << 16) + (buffer[this._receivePos + 3] << 24 >>> 0) + (0x100000000 * buffer[this._receivePos + 4]);\r\n                    //n = buffer.readUIntLE(this._receivePos, 5);\r\n                    this._receivePos += 5;\r\n                    break;\r\n                }\r\n                case 6: {\r\n                    n = buffer[this._receivePos] + (buffer[this._receivePos + 1] << 8) + (buffer[this._receivePos + 2] << 16) + (buffer[this._receivePos + 3] << 24 >>> 0) + (0x100000000 * (buffer[this._receivePos + 4] + (buffer[this._receivePos + 5] << 8)));\r\n                    //n = buffer.readUIntLE(this._receivePos, 6);\r\n                    this._receivePos += 6;\r\n                    break;\r\n                }\r\n                case 7: {\r\n                    n = buffer.readDoubleLE(this._receivePos);\r\n                    this._receivePos += 8;\r\n                    break;\r\n                }\r\n            }\r\n            let type = opcode & NUMBER_MASKS.OPCODE;\r\n            switch (type) {\r\n                case OPCODES.static: {\r\n                    //return this._receiveStrMap.get(n) as T;\r\n                    return this._receiveStrMap[n] as T;\r\n                }\r\n                case OPCODES.string: {\r\n                    return buffer.toString(\"utf8\", this._receivePos, this._receivePos += n) as T;\r\n                }\r\n                case OPCODES.strkey: {\r\n                    /*let str = buffer.toString(\"utf8\", this._receivePos, this._receivePos += n);\r\n                    this._receiveStrMap.set(this._receiveStrMapIndex++, str);\r\n                    return str as T;*/\r\n                    return (this._receiveStrMap[this._receiveStrMapIndex++] = buffer.toString(\"utf8\", this._receivePos, this._receivePos += n)) as T;\r\n                }\r\n                case OPCODES.number: {\r\n                    return ((opcode & NUMBER_MASKS.NEGATIVE) === NUMBER_MASKS.NEGATIVE ? -n : n) as T; // Duplicated to avoid methods or checking negative when not needed\r\n                }\r\n                case OPCODES.bigint: {\r\n                    return BigInt((opcode & NUMBER_MASKS.NEGATIVE) === NUMBER_MASKS.NEGATIVE ? -n : n) as T;\r\n                }\r\n                case OPCODES.full_bigint: {\r\n                    let blocks = buffer[this._receivePos];\r\n                    let r = PacoPack._ReadBigUint(buffer, this._receivePos + 1, blocks);\r\n                    this._receivePos += 1 + (blocks * 8);\r\n                    return ((opcode & NUMBER_MASKS.NEGATIVE) === NUMBER_MASKS.NEGATIVE ? -r : r) as T;\r\n                }\r\n                case OPCODES.date: {\r\n                    return new Date(n) as T;\r\n                }\r\n                case OPCODES.buffer: {\r\n                    return buffer.slice(this._receivePos, this._receivePos += n) as T;\r\n                }\r\n            }\r\n        } else {\r\n            switch (opcode) {\r\n                case OPCODES.string_single: {\r\n                    let size = buffer[this._receivePos];\r\n                    let n = buffer[this._receivePos + 1];\r\n                    const str = UTF8.toString(buffer, this._receivePos + 2, size, n);\r\n                    this._receivePos += 2 + n;\r\n                    return str as T;\r\n                }\r\n                case OPCODES.strkey_single: { // Almost duplicated to avoid branches\r\n                    let size = buffer[this._receivePos];\r\n                    let n = buffer[this._receivePos + 1];\r\n                    const str = this._receiveStrMap[this._receiveStrMapIndex++] = UTF8.toString(buffer, this._receivePos + 2, size, n);\r\n                    //this._receiveStrMap.set(this._receiveStrMapIndex++, str);\r\n                    this._receivePos += 2 + n;\r\n                    return str as T;\r\n                }\r\n                case OPCODES.object_start: {\r\n                    let obj:{[key:string]:Serializables} = {};\r\n                    while(buffer[this._receivePos] !== OPCODES.object_end) {\r\n                        let k = this._read<string>(buffer);\r\n                        obj[k] = this._read(buffer);\r\n                    }\r\n                    this._receivePos++;\r\n                    return obj as T;\r\n                }\r\n                case OPCODES.array_start: {\r\n                    let arr:Serializables[] = [];\r\n                    while(buffer[this._receivePos] !== OPCODES.array_end) {\r\n                        arr.push(this._read(buffer));\r\n                    }\r\n                    this._receivePos++;\r\n                    return arr as T;\r\n                }\r\n                case OPCODES.null: {\r\n                    return null as T;\r\n                }\r\n                case OPCODES.undefined: {\r\n                    return undefined as T;\r\n                }\r\n                case OPCODES.true: {\r\n                    return true as T;\r\n                }\r\n                case OPCODES.false: {\r\n                    return false as T;\r\n                }\r\n                case OPCODES.regexp: {\r\n                    let r = this._read<string>(buffer);\r\n                    let flags = buffer[this._receivePos++];\r\n                    let f = flags & REGEXP_FLAGS.g ? \"g\" : \"\";\r\n                    if (flags & REGEXP_FLAGS.m) {\r\n                        f += \"m\";\r\n                    }\r\n                    if (flags & REGEXP_FLAGS.s) {\r\n                        f += \"s\";\r\n                    }\r\n                    if (flags & REGEXP_FLAGS.i) {\r\n                        f += \"i\";\r\n                    }\r\n                    if (flags & REGEXP_FLAGS.u) {\r\n                        f += \"u\";\r\n                    }\r\n                    return new RegExp(r, f) as T;\r\n                }\r\n                case OPCODES.set_start: {\r\n                    let set = new Set<Serializables>();\r\n                    while(buffer[this._receivePos] !== OPCODES.set_end) {\r\n                        set.add(this._read(buffer));\r\n                    }\r\n                    this._receivePos++;\r\n                    return set as T;\r\n                }\r\n                case OPCODES.map_start: {\r\n                    let map = new Map<Serializables, Serializables>();\r\n                    while(buffer[this._receivePos] !== OPCODES.map_end) {\r\n                        let k = this._read(buffer);\r\n                        map.set(k, this._read(buffer));\r\n                    }\r\n                    this._receivePos++;\r\n                    return map as T;\r\n                }\r\n            }\r\n        }\r\n        throw new Error(\"Invalid buffer\");\r\n    }\r\n    private _write(d:Serializables<TO_JSON>) {\r\n        switch (typeof d) {\r\n            case \"object\": {\r\n                // Having a _writeObject had a small performance hit. Inlining it here.\r\n                if (d === null) {\r\n                    this._checkSize(1);\r\n                    this._buffer[this._pos++] = OPCODES.null;\r\n                } else if (d instanceof Uint8Array) {\r\n                    this._writeInteger(d.length, OPCODES.buffer, 0);\r\n                    this._slice();\r\n                    this._bufferArray.push(d);\r\n                    this._totalBuffer += d.length;\r\n                } else if (Array.isArray(d)) {\r\n                    this._checkSize(2 + (d.length * 2)); // Assume 2 bytes per element\r\n                    this._buffer[this._pos++] = OPCODES.array_start;\r\n                    for (let v of d) {\r\n                        this._write(v);\r\n                    }\r\n                    this._checkSize(1);\r\n                    this._buffer[this._pos++] = OPCODES.array_end;\r\n                } else if (d instanceof Set) {\r\n                    this._checkSize(2 + (d.size * 2)); // Assume 2 bytes per element\r\n                    this._buffer[this._pos++] = OPCODES.set_start;\r\n                    for (let v of d) {\r\n                        this._write(v);\r\n                    }\r\n                    this._checkSize(1);\r\n                    this._buffer[this._pos++] = OPCODES.set_end;\r\n                } else if (d instanceof Map) {\r\n                    this._checkSize(2 + (d.size * 5)); // Assume 5 bytes per element\r\n                    this._buffer[this._pos++] = OPCODES.map_start;\r\n                    for (let [k, v] of d) {\r\n                        this._write(k);\r\n                        this._write(v);\r\n                    }\r\n                    this._checkSize(1);\r\n                    this._buffer[this._pos++] = OPCODES.map_end;\r\n                } else if (d instanceof RegExp) {\r\n                    this._checkSize(2 + d.source.length + d.flags.length);\r\n                    this._buffer[this._pos++] = OPCODES.regexp;\r\n                    this._writeString(d.source, false);\r\n                    this._checkSize(1);\r\n                    // \"as any as number\" to avoid explicitly converting to a number, as performance degrades 20x when doing so.\r\n                    this._buffer[this._pos++] = (d.global as any as number * REGEXP_FLAGS.g) + (d.multiline as any as number * REGEXP_FLAGS.m) + (d.dotAll as any as number * REGEXP_FLAGS.s) + (d.ignoreCase as any as number * REGEXP_FLAGS.i) + (d.unicode as any as number * REGEXP_FLAGS.u);\r\n                } else if (d instanceof Date) {\r\n                    this._writeInteger(d.getTime(), OPCODES.date, 0);\r\n                } else {\r\n                    if (this.toJSON && typeof d.toJSON === \"function\") {\r\n                        this._write(d.toJSON() as Serializables<TO_JSON>);\r\n                    } else {\r\n                        if (this.options.sortKeys) {\r\n                            let keys = Object.keys(d);\r\n                            keys.sort();\r\n                            this._checkSize(2 + (keys.length * 5)); // Assume 5 bytes per element\r\n                            this._buffer[this._pos++] = OPCODES.object_start;\r\n                            for (let k of keys) {\r\n                                this._writeString(k, true);\r\n                                this._write((d as SerializableObject<TO_JSON>)[k]);\r\n                            }\r\n                        } else {\r\n                            // Better performance\r\n                            this._checkSize(2);\r\n                            this._buffer[this._pos++] = OPCODES.object_start;\r\n                            for (let k in d) {\r\n                                this._writeString(k, true);\r\n                                this._write((d as SerializableObject<TO_JSON>)[k]);\r\n                            }\r\n                        }\r\n                        this._checkSize(1);\r\n                        this._buffer[this._pos++] = OPCODES.object_end;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"string\": {\r\n                this._writeString(d, false);\r\n                break;\r\n            }\r\n            case \"number\": {\r\n                let negativeFlag = 0;\r\n                if (d < 0) {\r\n                    negativeFlag = NUMBER_MASKS.NEGATIVE;\r\n                    d = -d;\r\n                }\r\n                if (Number.isInteger(d)) {\r\n                    this._writeInteger(d, OPCODES.number + negativeFlag, 0);\r\n                } else {\r\n                    this._writeDouble(d, OPCODES.number + negativeFlag, 0);\r\n                }\r\n                break;\r\n            }\r\n            case \"bigint\": {\r\n                let negativeFlag = 0;\r\n                if (d < 0n) {\r\n                    negativeFlag = NUMBER_MASKS.NEGATIVE;\r\n                    d = -d;\r\n                }\r\n                if (d <= 0xFFFFFFFFFFFFn) {\r\n                    this._writeInteger(Number(d), OPCODES.bigint + negativeFlag, 0);\r\n                } else {\r\n                    let blocks = PacoPack._BigInt64BlocksCount(d);\r\n                    let bytecount = blocks * 8;\r\n                    this._checkSize(2 + bytecount);\r\n                    this._buffer[this._pos] = OPCODES.full_bigint + negativeFlag;\r\n                    this._buffer[this._pos + 1] = blocks;\r\n                    PacoPack._WriteBigUintDataView(this._dataView, this._pos + 2, d);\r\n                    //PacoPack.WriteBigUint(this._buffer, this._pos + 2, d);\r\n                    this._pos += 2 + bytecount;\r\n                }\r\n                break;\r\n            }\r\n            case \"boolean\": {\r\n                this._checkSize(1);\r\n                this._buffer[this._pos++] = d ? OPCODES.true : OPCODES.false;\r\n                break;\r\n            }\r\n            case \"undefined\": {\r\n                this._checkSize(1);\r\n                this._buffer[this._pos++] = OPCODES.undefined;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    private _checkSize(bytes:number) {\r\n        if (this._pos + bytes > this._size) {\r\n            if (this._pos > 0) {\r\n                this._bufferArray.push(this._buffer.slice(0, this._pos));\r\n                this._totalBuffer += this._pos;\r\n            }\r\n            this._buffer = Buffer.allocUnsafe(this._size = Math.max(this.options.step!, bytes));\r\n            this._dataView = new DataView(this._buffer.buffer, this._buffer.byteOffset, this._buffer.byteLength);\r\n            this._pos = 0;\r\n        }\r\n    }\r\n    private _slice() {\r\n        if (this._pos > 0) {\r\n            this._bufferArray.push(this._buffer.slice(0, this._pos));\r\n            this._totalBuffer += this._pos;\r\n        }\r\n        this._buffer = Buffer.allocUnsafe(this._size = this.options.step!);\r\n        this._dataView = new DataView(this._buffer.buffer, this._buffer.byteOffset, this._buffer.byteLength);\r\n        this._pos = 0;\r\n    }\r\n    private _writeString(str:string, key:boolean) {\r\n        let n = this._strMap[str];\r\n        if (n && n[NUMBER] > -1) { // Avoid hasOwnProperty/Map for performance reasons. On hit, obj is faster than Map.\r\n            this._writeInteger(n[NUMBER], OPCODES.static, 0);\r\n        } else if (str.length <= UTF8.MAX_1BYTE_UTF8) {\r\n            let size = str.length;\r\n            this._checkSize(3 + (size * 4));\r\n            if (key) {\r\n                this._strMap[str] = {[NUMBER]:this._strIndex++};\r\n                this._buffer[this._pos] = OPCODES.strkey_single;\r\n            } else {\r\n                this._buffer[this._pos] = OPCODES.string_single;\r\n            }\r\n            let res = UTF8.toBuffer(str, this._buffer, this._pos + 3);\r\n            if (res.isQuad) {\r\n                size = 0xFF;\r\n            }\r\n            this._buffer[this._pos + 1] = size;\r\n            this._buffer[this._pos + 2] = res.size;\r\n            this._pos += 3 + res.size;\r\n        } else {\r\n            let size = UTF8.byteLength(str);\r\n            if (key) {\r\n                this._strMap[str] = {[NUMBER]:this._strIndex++};\r\n                this._writeInteger(size, OPCODES.strkey, size);\r\n            } else {\r\n                this._writeInteger(size, OPCODES.string, size);\r\n            }\r\n            this._buffer.write(str, this._pos);\r\n            this._pos += size;\r\n        }\r\n    }\r\n    private _writeInteger(n:number, opcode:number, extrasize:number) {\r\n        if (n === 0) {\r\n            this._checkSize(1 + extrasize);\r\n            this._buffer[this._pos++] = opcode;\r\n        } else if (n <= 0xFF) {\r\n            this._checkSize(2 + extrasize);\r\n            this._buffer[this._pos] = opcode + 1;\r\n            this._buffer[this._pos + 1] = n;\r\n            this._pos += 2;\r\n        } else if (n <= 0xFFFF) {\r\n            this._checkSize(3 + extrasize);\r\n            this._buffer[this._pos] = opcode + 2;\r\n            //this._buffer.writeUInt16LE(n, this._pos + 1);\r\n            this._buffer[this._pos + 1] = n;\r\n            this._buffer[this._pos + 2] = n >> 8;\r\n            //this._dataView.setUint16(this._pos + 1, n, true);\r\n            this._pos += 3;\r\n        } else if (n <= 0xFFFFFF) {\r\n            this._checkSize(4 + extrasize);\r\n            this._buffer[this._pos] = opcode + 3;\r\n            this._buffer[this._pos + 1] = n;\r\n            this._buffer[this._pos + 2] = n >> 8;\r\n            this._buffer[this._pos + 3] = n >> 16;\r\n            //this._buffer.writeUIntLE(n, this._pos + 1, 3);\r\n            this._pos += 4;\r\n        } else if (n <= 0xFFFFFFFF) {\r\n            this._checkSize(5 + extrasize);\r\n            this._buffer[this._pos] = opcode + 4;\r\n            //this._dataView.setUint32(this._pos + 1, n, true);\r\n            this._buffer[this._pos + 1] = n;\r\n            this._buffer[this._pos + 2] = n >>> 8;\r\n            this._buffer[this._pos + 3] = n >>> 16;\r\n            this._buffer[this._pos + 4] = n >>> 24;\r\n            //this._buffer.writeUInt32LE(n, this._pos + 1);\r\n            this._pos += 5;\r\n        } else if (n <= 0xFFFFFFFFFF) {\r\n            this._checkSize(6 + extrasize);\r\n            this._buffer[this._pos] = opcode + 5;\r\n            this._buffer[this._pos + 1] = n;\r\n            this._buffer[this._pos + 2] = n >>> 8;\r\n            this._buffer[this._pos + 3] = n >>> 16;\r\n            this._buffer[this._pos + 4] = n >>> 24;\r\n            this._buffer[this._pos + 5] = n / 0x100000000;\r\n            //this._buffer.writeUIntLE(n, this._pos + 1, 5);\r\n            this._pos += 6;\r\n        } else if (n <= 0xFFFFFFFFFFFF) {\r\n            this._checkSize(7 + extrasize);\r\n            this._buffer[this._pos] = opcode + 6;\r\n            this._buffer[this._pos + 1] = n;\r\n            this._buffer[this._pos + 2] = n >>> 8;\r\n            this._buffer[this._pos + 3] = n >>> 16;\r\n            this._buffer[this._pos + 4] = n >>> 24;\r\n            n = n / 0x100000000;\r\n            this._buffer[this._pos + 5] = n;\r\n            this._buffer[this._pos + 6] = n >> 8;\r\n            //this._buffer.writeUIntLE(n, this._pos + 1, 6);\r\n            this._pos += 7;\r\n        } else {\r\n            this._writeDouble(n, opcode, extrasize);\r\n        }\r\n    }\r\n    private _writeDouble(n:number, opcode:number, extrasize:number) {\r\n        this._checkSize(9 + extrasize);\r\n        this._buffer[this._pos] = opcode + 7;\r\n        this._dataView.setFloat64(this._pos + 1, n, true);\r\n        //this._buffer.writeDoubleLE(n, this._pos + 1);\r\n        this._pos += 9;\r\n    }\r\n    private _get(slice:boolean) {\r\n        let buffer:Buffer;\r\n        if (this._bufferArray.length === 0) {\r\n            buffer = this._buffer.slice(0, this._pos);\r\n            if (!slice) {\r\n                buffer = Buffer.from(buffer);\r\n            }\r\n        } else {\r\n            if (this._pos > 0) {\r\n                this._bufferArray.push(this._buffer.slice(0, this._pos));\r\n                this._totalBuffer += this._pos;\r\n            }\r\n            buffer = Buffer.concat(this._bufferArray, this._totalBuffer);\r\n            this._bufferArray = [];\r\n            this._totalBuffer = 0;\r\n        }\r\n        return buffer;\r\n    }\r\n    resetStringMap() {\r\n        if (this.dictionary) {\r\n            this._strMap = Object.create(this.dictionary.words);\r\n            this._strIndex = this.dictionary.total;\r\n        } else {\r\n            this._strMap = {};\r\n            this._strIndex = 0;\r\n        }\r\n        this._dirtyStringMap = true;\r\n    }\r\n    setOptions(options:PacoPackOptions) {\r\n        this.options = {step: 512, ...options};\r\n    }\r\n    serialize(data:Serializables<TO_JSON>, offset = 0, slice = false) {\r\n        this._pos = offset;\r\n        if (this._size === 0 || this._size < this._pos) {\r\n            this._buffer = Buffer.allocUnsafe(this._size = this.options.step!);\r\n            this._dataView = new DataView(this._buffer.buffer, this._buffer.byteOffset, this._buffer.byteLength);\r\n        }\r\n        if (!this.options.mapKeys) {\r\n            this.resetStringMap();\r\n        }\r\n        if (this._dirtyStringMap) {\r\n            this._dirtyStringMap = false;\r\n        } else {\r\n            this._buffer[this._pos++] = OPCODES.string_map_do_not_reset;\r\n        }\r\n        this._write(data);\r\n        return this._get(slice);\r\n    }\r\n    deserialize(buffer:Buffer):unknown {\r\n        this._receivePos = 0;\r\n        if (buffer[this._receivePos] !== OPCODES.string_map_do_not_reset) {\r\n            this._resetReceiveStringMap();\r\n        } else {\r\n            this._receivePos++;\r\n        }\r\n        return this._read(buffer);\r\n    }\r\n}"],"names":[],"mappings":"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"}